name: "Build: MacOS"

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - develop
    paths:
      - "data/**"
      - "mods/**" 
      - "modules/**"
      - "layouts/**"
      - ".github/**"
      - "src/**"
  push:
    branches:
      - master
      - develop
    paths:
      - "data/**"
      - "mods/**"
      - "modules/**"
      - "layouts/**"
      - "src/**"

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  MAKEFLAGS: '-j 2'
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
  VCPKG_BINARY_SOURCES: 'clear;default,readwrite'

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macOS-14
            buildtype: macos-release
            triplet: x64-osx
            artifact-name: otclient
            packages: sccache

    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Install macOS Dependencies
      run: |
        brew install xquartz
        brew install libx11
        brew install libxext
        brew install openal-soft
        brew install physfs
        brew install sdl2

    - name: Cache vcpkg packages
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
          !${{ github.workspace }}/vcpkg/installed
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Cache build outputs
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/build/${{ matrix.buildtype }}
          !${{ github.workspace }}/build/${{ matrix.buildtype }}/CMakeCache.txt
          !${{ github.workspace }}/build/${{ matrix.buildtype }}/CMakeFiles
        key: build-${{ runner.os }}-${{ matrix.buildtype }}-${{ hashFiles('src/**/*.cpp', 'src/**/*.h') }}
        restore-keys: |
          build-${{ runner.os }}-${{ matrix.buildtype }}-

    - name: Create vcpkg binary cache directory
      run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
      env:
        VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}

    - name: Restore artifacts and install vcpkg (Unix)
      id: vcpkg-step-unix
      shell: bash
      run: |
        vcpkgCommitId=$(cat vcpkg.json | grep -o '"builtin-baseline": *"[^"]*"' | cut -d'"' -f4)
        echo "vcpkg commit ID: $vcpkgCommitId"
        echo "vcpkgGitCommitId=$vcpkgCommitId" >> $GITHUB_OUTPUT

    - name: Get latest CMake and ninja
      uses: lukka/get-cmake@latest

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: '${{ matrix.buildtype }}'
        buildPreset: '${{ matrix.buildtype }}'

    - name: Create and Upload Artifacts
      uses: actions/upload-artifact@main
      with:
        name: otclient-${{ matrix.os }}-${{ matrix.buildtype }}-${{ github.sha }}
        path: |
          ${{ github.workspace }}/build/${{ matrix.buildtype }}/${{ matrix.artifact-name }}

    - name: Create Client Package (macOS)
      run: |
        mkdir -p client
        cp -R data client/
        cp -R mods client/
        cp -R modules client/
        cp init.lua client/
        cp build/${{ matrix.buildtype }}/otclient client/
        chmod +x client/otclient
        zip -r client.zip client

    - name: Upload Client Package
      uses: actions/upload-artifact@v4
      with:
        name: client-${{ matrix.os }}-${{ matrix.buildtype }}
        path: |
          ${{ 'client.zip' }}
