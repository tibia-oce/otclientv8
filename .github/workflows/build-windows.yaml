name: "Build: Windows"

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - develop
    paths:
      - "data/**"
      - "mods/**" 
      - "modules/**"
      - "layouts/**"
      - ".github/workflows/build-windows.yaml"
      - "src/**"
  push:
    branches:
      - master
      - develop
      - fix/cmake
    paths:
      - ".github/workflows/build-windows.yaml"
      - "data/**"
      - "mods/**"
      - "modules/**"
      - "layouts/**"
      - "src/**"

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  MAKEFLAGS: '-j 2'
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
  VCPKG_BINARY_SOURCES: 'clear;default,readwrite'

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        buildtype: [windows-release]
        include:
          - os: windows-2022
            triplet: x64-windows
            packages: >
              sccache

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: CCache
        uses: hendrikmuhs/ccache-action@main
        with:
          max-size: "1G"
          variant: "sccache"
          key: ccache-${{ matrix.os }}-${{ matrix.buildtype }}
          restore-keys: |
            ccache-${{ matrix.os }}

      - name: Install pkg-config
        run: choco install pkgconfiglite
        shell: powershell
      
      - name: Restore artifacts and install vcpkg
        id: vcpkg-step
        run: |
          $json=Get-Content vcpkg.json -Raw | ConvertFrom-Json
          $vcpkgCommitId=$json.'builtin-baseline'
          Write-Host "vcpkg commit ID: $vcpkgCommitId"
          echo "vcpkgGitCommitId=$vcpkgCommitId" >> "$GITHUB_OUTPUT"

      - name: Get vcpkg commit id from vcpkg.json
        uses: lukka/run-vcpkg@main
        with:
          vcpkgGitURL: "https://github.com/microsoft/vcpkg.git"
          vcpkgGitCommitId: ${{ steps.vcpkg-step.outputs.vcpkgGitCommitId }}
          vcpkgJsonIgnores: "['**/vcpkg/**', '**/browser/overlay-ports/**']"

      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@main

      - name: Debug vcpkg installation
        shell: pwsh
        run: |
          Write-Host "Environment Variables:"
          Write-Host "VCPKG_ROOT: $env:VCPKG_ROOT"
          Write-Host "VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}"
          Write-Host "_VCPKG_INSTALLED_DIR: $env:_VCPKG_INSTALLED_DIR"
          
          Write-Host "`nVcpkg installed directory contents:"
          if (Test-Path "$env:VCPKG_ROOT/installed/${{ matrix.triplet }}") {
            Get-ChildItem "$env:VCPKG_ROOT/installed/${{ matrix.triplet }}" -Recurse | 
              Where-Object { $_.Name -match '(lua|zip|zlib|physfs|glew|openal|vorbis|ogg|openssl)\.(lib|dll|h)$' } |
              ForEach-Object { Write-Host $_.FullName }
          }
          
          Write-Host "`nChecking build directory:"
          if (Test-Path "build/vcpkg_installed/${{ matrix.triplet }}") {
            Get-ChildItem "build/vcpkg_installed/${{ matrix.triplet }}" -Recurse |
              Where-Object { $_.Name -match '(lua|zip|zlib|physfs|glew|openal|vorbis|ogg|openssl)\.(lib|dll|h)$' } |
              ForEach-Object { Write-Host $_.FullName }
          }

      - name: Run CMake
        uses: lukka/run-cmake@main
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
          VCPKG_TARGET_TRIPLET: ${{ matrix.triplet }}
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg
          _VCPKG_INSTALLED_DIR: ${{ github.workspace }}/build/vcpkg_installed
        with:
          configurePreset: ${{ matrix.buildtype }}
          buildPreset: ${{ matrix.buildtype }}

      - name: Create and Upload Artifact (exe)
        uses: actions/upload-artifact@main
        with:
          name: otclient-${{ matrix.os }}-${{ matrix.buildtype }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}/otclient.exe

      - name: Create Client Package
        run: |
          mkdir -p ${{ github.workspace }}/client
          cp -R ${{ github.workspace }}/layouts ${{ github.workspace }}/client/
          cp -R ${{ github.workspace }}/*.dll ${{ github.workspace }}/client/
          cp -R ${{ github.workspace }}/data ${{ github.workspace }}/client/
          cp -R ${{ github.workspace }}/mods ${{ github.workspace }}/client/
          cp -R ${{ github.workspace }}/modules ${{ github.workspace }}/client/
          cp ${{ github.workspace }}/init.lua ${{ github.workspace }}/client/
          cp ${{ github.workspace }}/build/${{ matrix.buildtype }}/otclient ${{ github.workspace }}/client/
          chmod +x ${{ github.workspace }}/client/otclient
  
      - name: Create and Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: client
          path: ${{ github.workspace }}/client
