name: Release

on:
  workflow_run:
    workflows: [ 'Build: Windows', 'Build: Ubuntu', 'Build: MacOS' ]
    branches: [ master, develop ]
    types: [ completed ]

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: mythbound-windows
          path: artifacts/mythbound-windows
          run-id: ${{ github.event.workflow.id }}

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: mythbound-linux
          path: artifacts/mythbound-linux
          run-id: ${{ github.event.workflow.id }}

      - name: Download MacOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: mythbound-macos
          path: artifacts/mythbound-macos
          run-id: ${{ github.event.workflow.id }}

      - name: List downloaded artifacts
        run: ls -R artifacts/

      - name: Package Windows Artifact
        working-directory: artifacts/mythbound-windows
        run: zip -r client.zip ./*

      - name: Package Linux Artifact
        working-directory: artifacts/mythbound-linux
        run: tar czf client.tar.gz ./*

      - name: Package MacOS Artifact
        working-directory: artifacts/mythbound-macos
        run: zip -r client.zip ./*

      # https://github.com/semantic-release/semantic-release/issues/1592#issuecomment-902533435
      # Semantic-release doesn't support pathing to a config file unless using a .js config:
      # instead copy the file to the root as a workaround to maintain workflow separation
      - name: Copy Release Config to Root
        run: |
          cp .github/.releaserc ./

      - name: Install Semantic Release
        run: |
          npm install semantic-release @semantic-release/github --save-dev
          npm install conventional-changelog-eslint --save-dev

      # Ensure that only one rc pre-release is active at a time by deleting the latest pre-release 
      # and its corresponding tag on the 'develop' branch. This avoids clutter from multiple rc 
      # releases after each merge into the develop branch.
      - name: Delete Existing Pre-release and Tag (Develop Branch Only)
        if: github.ref == 'refs/heads/develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_prerelease_tag=$(gh release list --limit 1 --json tagName,isPrerelease \
            --jq '.[] | select(.isPrerelease) | .tagName')

          if [ -n "$latest_prerelease_tag" ]; then
            gh release delete "$latest_prerelease_tag" --yes --cleanup-tag
          fi

      - name: Semantic Release (Dry Run for PRs)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --ci --dry-run

      - name: Semantic Release (Full Release on Push)
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: semantic-release:*
        run: npx semantic-release --ci

      # https://semantic-release.gitbook.io/semantic-release/usage/workflow-configuration#pre-release-branches
      # Semantic-release appends a numerical suffix to all pre-releases by default (e.g., `v0.0.1-rc.1`).
      # Currently, this behavior is not configurable via CLI or the release config. For improved readability 
      # and consistency, this step renames the tag and associated release by removing the numerical suffix
      # from the rc pre-release (e.g., renaming `v0.0.1-rc.1` to `v0.0.1-rc`).
      - name: Rename RC Release Tag (Develop Branch Only)
        if: github.ref == 'refs/heads/develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName,isPrerelease --jq '.[] | select(.isPrerelease) | .tagName')
          if [[ $latest_tag == *"-rc."* ]]; then
            new_tag=${latest_tag%-rc.*}-rc
            new_name="Release ${new_tag}"
            gh release edit "$latest_tag" --tag "$new_tag" --title "$new_name"
            git tag $new_tag $latest_tag  # Create the new tag pointing to the same commit
            git tag -d $latest_tag  # Delete the old tag locally
            git push origin $new_tag  # Push the new tag to the remote
            git push origin :refs/tags/$latest_tag  # Delete the old tag on the remote
          fi
